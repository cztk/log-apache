input { pipeline { address => apache_error } }

filter {

  # ErrorLogFormat "%{cu}t %v [%-l] [%-F] [%-E] [%-L] %M"
  #  ErrorLogFormat "%{cu}t %v [%-l] [%-F] [%-E] [%-L] %M"

  if "apache_error" in [tags] {

    grok {
      match => { "message" => '%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:apache_servername} \[%{DATA:log_level}\] \[%{DATA:file}\] \[%{DATA:error_code}\] \[%{DATA:request_id}\] %{GREEDYDATA:error_message}' }
      add_tag => ["copy_to_related"]
    }

    mutate {
      add_field => { "[data_stream][dataset]" => "apache.error" }
      add_field => { "[data_stream][namespace]" => "production" }
      add_field => { "[data_stream][type]" => "logs" }
      # add_field => { "[ecs][version]" => "8.11" }
      add_field => { "[event][action]" => "web-request" }
      add_field => { "[event][category]" => "web" }
      add_field => { "[event][dataset]" => "apache.error" }
      add_field => { "[event][kind]" => "event" }
      add_field => { "[event][module]" => "apache" }
      # tdod error status
      add_field => { "[event][outcome]" => "success" }


    }

    # url.domain
    # Domain of the url, such as "www.elastic.co".
    # In some cases a URL may refer to an IP and/or port directly, without a domain name.
    # In this case, the IP address would go to the domain field.
    # If the URL contains a literal IPv6 address enclosed by [ and ] (IETF RFC 2732), the [ and ]
    # characters should also be captured in the domain field.
    # type: keyword
    # example: www.ztk.casa
    # level: extended
    # apache: %v
    if [apache_servername] {
      mutate {
        rename => { "apache_servername" => "[url][domain]" }
      }
    } else {
      mutate {
       add_field => { "[@metadata][missing_url_domain]" => true }
      }
    }

    ## Log Fields

    # log.file.path

    # log.origin.file.name
    # The name of the file containing the source code which originated the log event.
    # Note that this field is not meant to capture the log file. The correct field to capture the log file is log.file.path.
    # type: keyword
    # level: extended
    # example: Bootstrap.java
    if [file] {
      mutate {
        rename => { "file" => "[log][origin][file][name]" }
      }
    }

    # log.level
    # Original log level of the log event.
    # If the source of the event provides a log level or textual severity, this is the one that goes in log.level.
    # If your source doesnâ€™t specify one, you may put your event transportâ€™s severity here (e.g. Syslog severity).
    # level: core
    # type: keyword
    # example: error
    # apache:
    if [log_level] {
      mutate {
        rename => { "log_level" => "[log][level]" }
      }
    }



    ## Error fields

    # error.code
    # Error code describing the error.
    # level: core
    # type: keyword
    # apache:
    if [error_code] {
      mutate {
        rename => { "error_code" => "[error][code]" }
      }
    }

    # error.id
    # Unique identifier for the error.
    # type: keyword
    # level: core
    # see request_id below

    # error.message
    # Error message
    # level: core
    # type: match_only_text
    if [error_message] {
      mutate {
        rename => { "error_message" => "[error][message]" }
      }
    }

    # error.stack_trace
    # The stack trace of this error in plain text.
    # type: wildcard
    #  Multi-fields: error.stack_trace.text (type: match_only_text)
    # level: extended

    # error.type
    # The type of the error, for example the class name of the exception.
    # level: extended
    # type: keyword
    # example: java.lang.NullPointerException
    #


    # error.message




    ## Tracing fields

    # trace.id
    # Unique identifier of the trace
    # A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.
    # type: keyword
    # level: extended
    # example: 4bf92f3577b34da6a3ce929d0e0e4736
    # apache: %{UNIQUE_ID}e
    # requires mod unique_id
    if [request_id] {
      mutate {
        copy => { "request_id" => "[error][id]" }
        rename => { "request_id" => "[trace][id]" }
      }
    } else {
      mutate {
       add_field => { "[@metadata][missing_request_id]" => true }
      }
    }


    ## copy to related
    if "copy_to_related" in [tags] {
        ruby {
        code => '
          event.set("[related][hash]", [
            event.get("[trace][id]")
          ])
        '
        }
    }

  }
}

output {


}
